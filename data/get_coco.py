"""
get_coco.py  â€“ hardâ€‘path, scriptâ€‘relative version
-------------------------------------------------
Download tiny slices (default 10 images each) of **MSâ€‘COCO 2014** *train* and
*val* splits, then write two Python modules containing `TRAIN_ANNOTATIONS_COCO`
and `VAL_ANNOTATIONS_COCO` so you can import them directly in `train.py` or
`evaluate.py`.

Run:

    python get_coco.py

What happens
------------
1. Creates output directories if they donâ€™t exist:
   * `<ROOT>/data/coco/train/`  (same path your training script already uses)
   * `Config.IMAGE_DIR_TEST`    (for validation images)
2. Downloads **<NUM>** JPEGs from each split.
3. Writes:

       data/coco/train/coco_train_annotations.py   â†’ TRAIN_ANNOTATIONS_COCO
       <Config.IMAGE_DIR_TEST>/coco_val_annotations.py â†’ VAL_ANNOTATIONS_COCO

You can then do

```python
from data.coco.train.coco_train_annotations import TRAIN_ANNOTATIONS_COCO
from data.coco.val.coco_val_annotations   import VAL_ANNOTATIONS_COCO
```

Adjust `NUM` below if you want more (or fewer) samples.
"""

from pathlib import Path
from typing import List, Tuple
import json
import urllib.request


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ”§ HARDâ€‘CODED PATHS  (relative to repo root)
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
SCRIPT_DIR = Path(__file__).resolve().parent
ROOT       = SCRIPT_DIR.parent

CAPTIONS_JSON_TRAIN = ROOT / "data" / "coco" / "json" / "captions_train2014.json"
CAPTIONS_JSON_VAL   = ROOT / "data" / "coco" / "json" / "captions_val2014.json"

OUT_DIR_TRAIN = ROOT / "data" / "coco" / "train"
OUT_DIR_VAL   =  ROOT / "data" / "coco" / "val"         # e.g. data/coco/val

NUM = 100  # images per split
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€


# -----------------------------------------------------------------------------
# Helper functions
# -----------------------------------------------------------------------------

def choose_examples(coco_json: Path, num: int = NUM) -> List[Tuple[str, str, str]]:
    """Return a list of *(file_stem, coco_url, caption)* tuples (first caption
    for each image)."""
    with coco_json.open("r") as f:
        data = json.load(f)

    id2img = {img["id"]: (Path(img["file_name"]).stem, img["coco_url"]) for img in data["images"]}

    examples, seen = [], set()
    for ann in data["annotations"]:
        img_id = ann["image_id"]
        if img_id in seen or img_id not in id2img:
            continue
        stem, url = id2img[img_id]
        examples.append((stem, url, ann["caption"].strip()))
        seen.add(img_id)
        if len(examples) == num:
            break
    return examples


def download(url: str, dest: Path) -> None:
    if dest.exists():
        return
    dest.parent.mkdir(parents=True, exist_ok=True)
    with urllib.request.urlopen(url) as r, dest.open("wb") as f:
        f.write(r.read())


def save_annotation_py(examples: List[Tuple[str, str, str]], out_py: Path, var_name: str) -> None:
    out_py.parent.mkdir(parents=True, exist_ok=True)
    with out_py.open("w") as f:
        f.write(f"# Autoâ€‘generated by get_coco.py for split '{var_name.lower()}'\n")
        f.write(f"{var_name} = [\n")
        for stem, _, cap in examples:
            cap = cap.replace('"', '\\"')
            f.write(f'    ("{stem}", "{cap}"),\n')
        f.write("]\n")


def process_split(captions_json: Path, out_dir: Path, var_name: str):
    if not captions_json.exists():
        raise FileNotFoundError(captions_json)

    examples = choose_examples(captions_json, NUM)

    for stem, url, _ in examples:
        ext = url.split(".")[-1]  # usually 'jpg'
        dest = out_dir / f"{stem}.{ext}"
        print(f"â¬‡  {dest.relative_to(ROOT)}")
        download(url, dest)

    save_annotation_py(examples, out_dir / f"{var_name.lower()}.py", var_name)
    print(f"âœ“ Wrote {len(examples)} samples to {out_dir.relative_to(ROOT)}\n")


# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------

def main():
    print("Processing TRAIN split â€¦")
    process_split(CAPTIONS_JSON_TRAIN, OUT_DIR_TRAIN, "TRAIN_ANNOTATIONS_COCO")

    print("Processing VAL split â€¦")
    process_split(CAPTIONS_JSON_VAL, OUT_DIR_VAL, "VAL_ANNOTATIONS_COCO")


if __name__ == "__main__":
    main()
